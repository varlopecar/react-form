#!/usr/bin/env node

/**
 * Runtime Configuration Setup Script
 * 
 * This script helps set up runtime configuration for the frontend application.
 * It can be used to inject environment variables at runtime without rebuilding.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration options
const config = {
    // Default API URL (now production)
    defaultApiUrl: 'https://backend-omega-khaki.vercel.app',

    // Development API URL (for local development)
    developmentApiUrl: 'http://localhost:8000',

    // Production API URL (should be set via environment variable)
    productionApiUrl: process.env.VITE_API_URL || 'https://backend-omega-khaki.vercel.app',

    // Output directory
    outputDir: path.join(__dirname, '..', 'dist'),

    // Configuration file name
    configFileName: 'runtime-config.js'
};

/**
 * Generate runtime configuration
 */
function generateRuntimeConfig() {
    const isDevelopment = process.env.NODE_ENV === 'development' || process.env.NODE_ENV === undefined;
    const apiUrl = isDevelopment ? config.developmentApiUrl : config.productionApiUrl;

    const configContent = `// Runtime Configuration - Generated by setup-runtime-config.js
// This file is generated automatically and should not be edited manually

window.__ENV__ = {
  VITE_API_URL: '${apiUrl}',
  NODE_ENV: '${process.env.NODE_ENV || 'development'}',
  BUILD_TIME: '${new Date().toISOString()}'
};

console.log('Runtime configuration loaded:', window.__ENV__);
`;

    return configContent;
}

/**
 * Write configuration to file
 */
function writeConfigFile() {
    const configContent = generateRuntimeConfig();
    const configPath = path.join(config.outputDir, config.configFileName);

    // Ensure output directory exists
    if (!fs.existsSync(config.outputDir)) {
        fs.mkdirSync(config.outputDir, { recursive: true });
        console.log(`Created directory: ${config.outputDir}`);
    }

    // Write configuration file
    fs.writeFileSync(configPath, configContent);

    const isDevelopment = process.env.NODE_ENV === 'development' || process.env.NODE_ENV === undefined;
    console.log(`‚úÖ Runtime configuration written to: ${configPath}`);
    console.log(`üîó API URL: ${isDevelopment ? config.developmentApiUrl : config.productionApiUrl} (${isDevelopment ? 'development' : 'production'})`);
}

/**
 * Update HTML file to include runtime config
 */
function updateHtmlFile() {
    const htmlPath = path.join(config.outputDir, 'index.html');

    if (!fs.existsSync(htmlPath)) {
        console.log('‚ö†Ô∏è  HTML file not found, skipping HTML update');
        return;
    }

    let htmlContent = fs.readFileSync(htmlPath, 'utf8');

    // Check if runtime config script is already included
    if (htmlContent.includes('runtime-config.js')) {
        console.log('‚úÖ Runtime config script already included in HTML');
        return;
    }

    // Add runtime config script before the main script
    const scriptTag = `<script src="./${config.configFileName}"></script>`;
    const mainScriptTag = '<script type="module" src="/src/main.tsx"></script>';

    if (htmlContent.includes(mainScriptTag)) {
        htmlContent = htmlContent.replace(mainScriptTag, `${scriptTag}\n    ${mainScriptTag}`);
        fs.writeFileSync(htmlPath, htmlContent);
        console.log('‚úÖ Updated HTML file to include runtime configuration');
    } else {
        console.log('‚ö†Ô∏è  Could not find main script tag in HTML');
    }
}

/**
 * Main function
 */
function main() {
    console.log('üöÄ Setting up runtime configuration...');
    console.log(`üìÅ Output directory: ${config.outputDir}`);
    console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);

    try {
        writeConfigFile();
        updateHtmlFile();
        console.log('‚úÖ Runtime configuration setup complete!');
    } catch (error) {
        console.error('‚ùå Error setting up runtime configuration:', error.message);
        process.exit(1);
    }
}

// Run if called directly
main(); 