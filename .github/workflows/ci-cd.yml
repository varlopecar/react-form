name: CI/CD â€“ React, FastAPI, Docker, Cypress

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    services:
      mysql:
        image: mysql:8.2
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: react_form
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Cypress cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: Install dependencies and run unit/integration tests
        working-directory: ./
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'https://react-form-chi-one.vercel.app' }}
        run: |
          pnpm install --frozen-lockfile
          pnpm run coverage
          pnpm run doc
          pnpm run build

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          fail_ci_if_error: false

      - name: Upload dist for GitHub Pages
        uses: actions/upload-artifact@v4
        with:
          name: github-pages-dist
          path: dist

  docker_and_e2e:
    runs-on: ubuntu-latest
    needs: build_test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Docker environment
        env:
          MYSQL_DATABASE: react_form
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_ROOT_PASSWORD: root
          MYSQL_HOST: mysql-db
          MYSQL_PORT: 3306
          PORT: 8000
          ADMIN_EMAIL: admin@example.com
          ADMIN_PASSWORD: admin123
          JWT_SECRET: your-secret-key-here
        run: docker compose up -d --build
        working-directory: ./

      - name: Wait for services to be ready
        run: |
          echo "Waiting for backend (http://localhost:8000) to be ready..."
          timeout 90 bash -c 'until curl -f http://localhost:8000/health > /dev/null 2>&1; do sleep 2; done'
          echo "Waiting for frontend (http://localhost:3000) to be ready..."
          timeout 90 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; done'

      - name: Verify backend health and admin user
        run: |
          echo "Verifying backend health..."
          curl -f http://localhost:8000/health
          echo "Backend is healthy!"

      - name: Display frontend logs
        run: docker logs react-app

      - name: Check React build content
        run: docker exec react-app ls -l /app/dist

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Cypress cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Cypress binary
        run: |
          npx cypress install --force
          npx cypress verify

      - name: Run Cypress tests against Docker environment
        env:
          VITE_API_URL: http://localhost:8000
          CYPRESS_BASE_URL: http://localhost:3000
        run: |
          echo "Starting Cypress tests..."
          echo "Backend URL: http://localhost:8000"
          echo "Frontend URL: http://localhost:3000"
          pnpm run cypress:run || (echo "Cypress tests failed, but continuing..." && exit 1)

      - name: Stop services
        if: always()
        run: docker compose down

  deploy_pages:
    needs: build_test
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v3

      - name: Download dist from previous job
        uses: actions/download-artifact@v4
        with:
          name: github-pages-dist
          path: dist

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Cypress cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for GitHub Pages
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'https://react-form-chi-one.vercel.app' }}
        run: pnpm run build:pages

      - name: Create .nojekyll
        run: echo > dist/.nojekyll
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  build-and-push-react:
    needs: build_test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: varlopecar
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/varlopecar/ci_cd_react_ynov
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=long
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: DockerfileReact
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-and-push-fastapi:
    needs: build_test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: varlopecar
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/varlopecar/ci_cd_fastapi_ynov
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=long
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy_npm:
    needs: build_test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build npm package
        run: pnpm run build
        working-directory: ./

      - name: Configure Git
        run: |
          git config --global user.email "varlopecar@gmail.com"
          git config --global user.name "varlopecar"

      - name: Setup npm auth
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Check if version is already published
        run: |
          PKG_NAME=$(node -p "require('./package.json').name")
          PKG_VERSION=$(node -p "require('./package.json').version")
          if npm view "$PKG_NAME@$PKG_VERSION" > /dev/null 2>&1; then
            echo "Version $PKG_VERSION already exists on NPM. Skipping publish."
            exit 0
          else
            echo "Version $PKG_VERSION is not published yet. Proceeding with publish."
          fi

      - name: Publish to NPM
        if: success()
        run: npm publish
        working-directory: ./
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}