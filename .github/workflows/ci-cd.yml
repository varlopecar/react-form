name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"

jobs:
  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install frontend dependencies
        run: npm ci

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run frontend integration tests
        run: npm run test:integration

      - name: Run backend integration tests
        run: |
          cd backend
          python -m pytest test_main.py -v

  # Docker Environment Setup
  docker-setup:
    name: Docker Environment
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/react-form-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/react-form-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push blog API image
        uses: docker/build-push-action@v5
        with:
          context: ../express-mongodb-app
          file: ../express-mongodb-app/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/blog-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # E2E Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [docker-setup]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: react_form_db
          MYSQL_USER: app_user
          MYSQL_PASSWORD: app_password
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306

      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: adminpassword
          MONGO_INITDB_DATABASE: blog_db
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Start backend services
        run: |
          cd backend
          DATABASE_URL="mysql+pymysql://app_user:app_password@localhost:3306/react_form_db" \
          SECRET_KEY="test-secret-key" \
          python main.py &
          sleep 10

      - name: Start blog API
        run: |
          cd ../express-mongodb-app
          MONGODB_URI="mongodb://admin:adminpassword@localhost:27017/blog_db?authSource=admin" \
          PORT=3001 \
          npm start &
          sleep 10

      - name: Run E2E tests
        run: npm run e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: cypress/videos/
          retention-days: 7

  # Terraform Deployment
  terraform-deploy:
    name: Terraform Deployment
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        working-directory: ../terraform-architecture
        run: terraform init

      - name: Terraform Plan
        working-directory: ../terraform-architecture
        env:
          TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_scalingo_token: ${{ secrets.SCALINGO_TOKEN }}
        run: |
          terraform plan \
            -var="environment=docker" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: ../terraform-architecture
        env:
          TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_scalingo_token: ${{ secrets.SCALINGO_TOKEN }}
        run: terraform apply -auto-approve tfplan

      - name: Terraform Output
        working-directory: ../terraform-architecture
        run: terraform output

  # Scalingo Deployment
  scalingo-deploy:
    name: Scalingo Deployment
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        working-directory: ../terraform-architecture
        run: terraform init

      - name: Terraform Plan Scalingo
        working-directory: ../terraform-architecture
        env:
          TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_scalingo_token: ${{ secrets.SCALINGO_TOKEN }}
        run: |
          terraform plan \
            -var="environment=scalingo" \
            -out=tfplan-scalingo

      - name: Terraform Apply Scalingo
        working-directory: ../terraform-architecture
        env:
          TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_scalingo_token: ${{ secrets.SCALINGO_TOKEN }}
        run: terraform apply -auto-approve tfplan-scalingo

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Performance Test
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [docker-setup]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
