x-common-variables: &common-variables
  MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root_password}
  MYSQL_DATABASE: ${MYSQL_DATABASE:-react_form_db}
  MYSQL_USER: ${MYSQL_USER:-react_user}
  MYSQL_PASSWORD: ${MYSQL_PASSWORD:-react_password}
  MYSQL_HOST: ${MYSQL_HOST:-mysql}
  # RocketAdmin configuration
  ROCKETADMIN_HOST: ${ROCKETADMIN_HOST:-rocketadmin}
  ROCKETADMIN_PORT: ${ROCKETADMIN_PORT:-3306}

services:
  # MySQL Database
  mysql:
    image: mysql:8.2
    container_name: react-form-mysql
    restart: unless-stopped
    environment:
      <<: *common-variables
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - react-form-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 30s

  # RocketAdmin Agent
  rocketadmin:
    image: rocketadmin/rocketadmin-agent:latest
    container_name: react-form-rocketadmin
    restart: unless-stopped
    environment:
      <<: *common-variables
      # RocketAdmin specific configuration
      ROCKETADMIN_API_KEY: ${ROCKETADMIN_API_KEY:-}
      ROCKETADMIN_PROJECT_ID: ${ROCKETADMIN_PROJECT_ID:-}
      ROCKETADMIN_ENVIRONMENT: ${ROCKETADMIN_ENVIRONMENT:-development}
    ports:
      - "3307:3306" # RocketAdmin port
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - react-form-network
    volumes:
      - rocketadmin_data:/data
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-P", "3306"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 30s

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: react-form-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - react-form-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: react-form-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      <<: *common-variables
      ADMIN_EMAIL: ${ADMIN_EMAIL:-loise.fenoll@ynov.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-PvdrTAzTeR247sDnAZBr}
      ENVIRONMENT: development
      # RocketAdmin database URL (optional, for migration)
      ROCKETADMIN_DATABASE_URL: ${ROCKETADMIN_DATABASE_URL:-}
    depends_on:
      mysql:
        condition: service_healthy
      rocketadmin:
        condition: service_healthy
    networks:
      - react-form-network
    volumes:
      - ./backend:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: react-form-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      <<: *common-variables
    depends_on:
      backend:
        condition: service_started
    networks:
      - react-form-network
    # Remove conflicting volumes for development
    # volumes:
    #   - ./src:/app/src
    #   - ./public:/app/public
    # Use the built-in command from Dockerfile
    # command: npm run dev -- --host 0.0.0.0 --port 3000

volumes:
  mysql_data:
  rocketadmin_data:

networks:
  react-form-network:
    driver: bridge
